[1mdiff --git a/package.json b/package.json[m
[1mindex f6c210e..8be59e6 100644[m
[1m--- a/package.json[m
[1m+++ b/package.json[m
[36m@@ -8,7 +8,10 @@[m
     "test": "vitest run",[m
     "test:ui": "vitest",[m
     "test:api": "vitest run tests/api",[m
[31m-    "test:e2e": "playwright test"[m
[32m+[m[32m    "test:e2e": "playwright test",[m
[32m+[m[32m    "build:prodcheck": "next build",[m
[32m+[m[32m    "deploy:prod": "vercel pull --yes --environment=production && vercel build --prod && vercel deploy --prebuilt --prod",[m
[32m+[m[32m    "smoke": "bash scripts/smoke.sh"[m
   },[m
   "dependencies": {[m
     "@dnd-kit/core": "^6.3.1",[m
[1mdiff --git a/scripts/smoke.sh b/scripts/smoke.sh[m
[1mindex 6651caf..aab3c60 100644[m
[1m--- a/scripts/smoke.sh[m
[1m+++ b/scripts/smoke.sh[m
[36m@@ -1,163 +1,48 @@[m
[31m-#!/bin/bash[m
[32m+[m[32m#!/usr/bin/env bash[m
[32m+[m[32mset -euo pipefail[m
 [m
[31m-# Smoke Tests pour LMS - Tests de base apr√®s d√©ploiement[m
[31m-# Usage: ./scripts/smoke.sh https://your-app.vercel.app[m
[32m+[m[32mBASE=${1:-"https://learningmanagementsystem.vercel.app"}[m
[32m+[m[32mecho "üß™ Smoke tests on $BASE"[m
[32m+[m[32mecho "=========================="[m
 [m
[31m-set -e[m
[31m-[m
[31m-BASE_URL=${1:-"http://localhost:3000"}[m
[31m-ORG_SLUG="test-org"[m
[31m-[m
[31m-echo "üß™ Smoke Tests LMS - Base URL: $BASE_URL"[m
[31m-echo "=========================================="[m
[31m-[m
[31m-# Couleurs pour les logs[m
[31m-RED='\033[0;31m'[m
[31m-GREEN='\033[0;32m'[m
[31m-YELLOW='\033[1;33m'[m
[31m-NC='\033[0m' # No Color[m
[31m-[m
[31m-# Fonction pour tester une URL[m
[31m-test_url() {[m
[31m-    local method=$1[m
[31m-    local url=$2[m
[31m-    local expected_status=$3[m
[31m-    local description=$4[m
[31m-    [m
[31m-    echo -n "Testing $description... "[m
[31m-    [m
[31m-    if [ "$method" = "GET" ]; then[m
[31m-        status=$(curl -s -o /dev/null -w "%{http_code}" "$url")[m
[31m-    elif [ "$method" = "POST" ]; then[m
[31m-        status=$(curl -s -o /dev/null -w "%{http_code}" -X POST "$url" \[m
[31m-            -H "Content-Type: application/json" \[m
[31m-            -d '{"title":"Smoke Test Pathway"}')[m
[31m-    elif [ "$method" = "PUT" ]; then[m
[31m-        status=$(curl -s -o /dev/null -w "%{http_code}" -X PUT "$url" \[m
[31m-            -H "Content-Type: application/json" \[m
[31m-            -d '{"title":"Smoke Test Updated"}')[m
[31m-    elif [ "$method" = "DELETE" ]; then[m
[31m-        status=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE "$url")[m
[31m-    fi[m
[31m-    [m
[31m-    if [ "$status" = "$expected_status" ]; then[m
[31m-        echo -e "${GREEN}‚úÖ $status${NC}"[m
[31m-        return 0[m
[31m-    else[m
[31m-        echo -e "${RED}‚ùå $status (expected $expected_status)${NC}"[m
[31m-        return 1[m
[31m-    fi[m
[31m-}[m
[31m-[m
[31m-# Tests de base[m
[31m-echo -e "\n${YELLOW}1. Tests de sant√©${NC}"[m
[31m-test_url "GET" "$BASE_URL/api/health" "200" "Health check"[m
[31m-[m
[31m-# Tests API avec authentification requise[m
[31m-echo -e "\n${YELLOW}2. Tests API (auth required)${NC}"[m
[31m-test_url "GET" "$BASE_URL/api/formations?org=$ORG_SLUG" "400" "Formations API (missing auth)"[m
[31m-test_url "GET" "$BASE_URL/api/parcours?org=$ORG_SLUG" "400" "Parcours API (missing auth)"[m
[31m-[m
[31m-# Test de rate limiting[m
[31m-echo -e "\n${YELLOW}3. Test de rate limiting${NC}"[m
[31m-echo -n "Testing rate limiting... "[m
[31m-for i in {1..65}; do[m
[31m-    curl -s -o /dev/null "$BASE_URL/api/formations?org=$ORG_SLUG" &[m
[31m-done[m
[31m-wait[m
[31m-[m
[31m-# Le 65√®me appel devrait retourner 429[m
[31m-status=$(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL/api/formations?org=$ORG_SLUG")[m
[31m-if [ "$status" = "429" ]; then[m
[31m-    echo -e "${GREEN}‚úÖ Rate limiting works (429)${NC}"[m
[31m-    [m
[31m-    # V√©rifier les headers de rate limiting[m
[31m-    headers=$(curl -s -I "$BASE_URL/api/formations?org=$ORG_SLUG")[m
[31m-    if echo "$headers" | grep -q "X-RateLimit-Limit"; then[m
[31m-        echo -e "${GREEN}‚úÖ Rate limit headers present${NC}"[m
[31m-    else[m
[31m-        echo -e "${YELLOW}‚ö†Ô∏è  Rate limit headers missing${NC}"[m
[31m-    fi[m
[31m-else[m
[31m-    echo -e "${YELLOW}‚ö†Ô∏è  Rate limiting not triggered ($status)${NC}"[m
[31m-fi[m
[31m-[m
[31m-# Test des pages principales[m
[31m-echo -e "\n${YELLOW}4. Test des pages${NC}"[m
[31m-test_url "GET" "$BASE_URL/" "200" "Home page"[m
[31m-test_url "GET" "$BASE_URL/login/admin" "200" "Login page"[m
[31m-[m
[31m-# Test de l'API env-check[m
[31m-echo -e "\n${YELLOW}5. Test de configuration${NC}"[m
[31m-test_url "GET" "$BASE_URL/api/env-check" "200" "Environment check"[m
[31m-[m
[31m-# Test Sentry (optionnel)[m
[31m-echo -e "\n${YELLOW}6. Test Sentry (optionnel)${NC}"[m
[31m-echo -n "Testing Sentry error capture... "[m
[31m-sentry_status=$(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL/api/_boom")[m
[31m-if [ "$sentry_status" = "500" ]; then[m
[31m-    echo -e "${GREEN}‚úÖ Sentry test endpoint returns 500${NC}"[m
[31m-    echo -e "${YELLOW}‚ÑπÔ∏è  Check Sentry dashboard for captured error${NC}"[m
[32m+[m[32m# Test health check[m
[32m+[m[32mecho -n "Testing /api/health... "[m
[32m+[m[32mif curl -sf "$BASE/api/health" >/dev/null; then[m
[32m+[m[32m    echo "‚úÖ OK"[m
 else[m
[31m-    echo -e "${YELLOW}‚ö†Ô∏è  Sentry test status unclear ($sentry_status)${NC}"[m
[32m+[m[32m    echo "‚ùå FAILED"[m
[32m+[m[32m    exit 1[m
 fi[m
 [m
[31m-# Test avec authentification simul√©e (si possible)[m
[31m-echo -e "\n${YELLOW}7. Test d'authentification${NC}"[m
[31m-echo -n "Testing auth flow... "[m
[31m-[m
[31m-# Test sans token (devrait retourner 401)[m
[31m-auth_status=$(curl -s -o /dev/null -w "%{http_code}" \[m
[31m-    -H "Authorization: Bearer invalid-token" \[m
[31m-    "$BASE_URL/api/formations?org=$ORG_SLUG")[m
[31m-[m
[31m-if [ "$auth_status" = "401" ] || [ "$auth_status" = "400" ]; then[m
[31m-    echo -e "${GREEN}‚úÖ Auth protection works ($auth_status)${NC}"[m
[32m+[m[32m# Test formations API (should return 400 without auth)[m
[32m+[m[32mecho -n "Testing /api/formations?org=demo... "[m
[32m+[m[32mstatus=$(curl -s -o /dev/null -w "%{http_code}" "$BASE/api/formations?org=demo")[m
[32m+[m[32mif [[ "$status" == "400" ]]; then[m
[32m+[m[32m    echo "‚úÖ OK (400 - auth required)"[m
 else[m
[31m-    echo -e "${YELLOW}‚ö†Ô∏è  Auth status unclear ($auth_status)${NC}"[m
[32m+[m[32m    echo "‚ö†Ô∏è  Unexpected status: $status"[m
 fi[m
 [m
[31m-# Test de performance[m
[31m-echo -e "\n${YELLOW}8. Test de performance${NC}"[m
[31m-echo -n "Testing response time... "[m
[31m-start_time=$(date +%s%3N)[m
[31m-curl -s -o /dev/null "$BASE_URL/api/health"[m
[31m-end_time=$(date +%s%3N)[m
[31m-duration=$((end_time - start_time))[m
[31m-[m
[31m-if [ "$duration" -lt 1000 ]; then[m
[31m-    echo -e "${GREEN}‚úÖ Fast response (${duration}ms)${NC}"[m
[31m-else[m
[31m-    echo -e "${YELLOW}‚ö†Ô∏è  Slow response (${duration}ms)${NC}"[m
[31m-fi[m
[32m+[m[32m# Simple rate limit test[m
[32m+[m[32mecho -n "Testing rate limiting... "[m
[32m+[m[32mok=0[m
[32m+[m[32mfor i in $(seq 1 65); do[m
[32m+[m[32m    code=$(curl -s -o /dev/null -w "%{http_code}" "$BASE/api/health")[m
[32m+[m[32m    if [[ "$code" == "200" ]]; then[m
[32m+[m[32m        ok=$((ok+1))[m
[32m+[m[32m    fi[m
[32m+[m[32mdone[m
 [m
[31m-# Test de sant√© g√©n√©ral[m
[31m-echo -e "\n${YELLOW}9. Test de sant√© g√©n√©ral${NC}"[m
[31m-echo -n "Testing overall health... "[m
[32m+[m[32m# Check if rate limiting kicked in[m
[32m+[m[32mfinal_code=$(curl -s -o /dev/null -w "%{http_code}" "$BASE/api/health")[m
[32m+[m[32mecho "Last code: $final_code (expect 429 after burst)"[m
 [m
[31m-# V√©rifier que l'application r√©pond[m
[31m-health_status=$(curl -s -o /dev/null -w "%{http_code}" 